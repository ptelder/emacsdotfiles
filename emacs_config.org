#+TITLE: Emacs Configuration
#+AUTHOR: Kenneth W Brown III

This concept is blatantly ripped off from Daniel Mai. This file assumes Emacs 24 or above.

* Personal Information

I have no idea where this gets used, but the Emacs docs say they're legit... Perhaps they can be fed to default skeletons?

#+begin_src emacs-lisp
(setq user-full-name "Kenneth W Brown III"
      user-mail-address "pliny@ptelder.net")
#+end_src

* Customize settings

Set up the customize system to use its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "customize-persistence.el" user-emacs-directory))
(load custom-file)
#+end_src

* Unicode! Do you Speak Itâ€½

Stolen from [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el]]

#+begin_src emacs-lisp
;; UTF-8 please
(setq locale-coding-system 'utf-8) ; pretty
(set-terminal-coding-system 'utf-8) ; pretty
(set-keyboard-coding-system 'utf-8) ; pretty
(set-selection-coding-system 'utf-8) ; please
(prefer-coding-system 'utf-8) ; with sugar on top
#+end_src

* Machine Specific Tweaks

Set up SQL*Plus (Oracle) mode for emacs on $WORKPLACE workstations
[[http://www.emacswiki.org/emacs/SqlPlus]]

#+begin_src emacs-lisp
(use-package sqlplus
  :ensure t)
#+end_src

Unfortunately, sqlplus.el has a nasty tendency to faceplant and dump it's buffers. This snippet from [[http://stackoverflow.com/questions/1486321/emacs-sqlplus-disconnected][Stack Exchange]] seems to do the trick to prevent it.

#+begin_src emacs-lisp
(defvar hostname
  (or (getenv "HOSTNAME") (getenv "COMPUTERNAME") "unknown")
  "hostname of this machine")

(when (string-match "PC25" hostname)
  (defun sqlplus-verify-buffer (connect-string)
  (let ((output-buffer-name (sqlplus-get-output-buffer-name connect-string))
    (process-buffer-name (sqlplus-get-process-buffer-name connect-string)))
    (when (not (get-buffer process-buffer-name))
      (sqlplus-shutdown connect-string)
      (error "No SQL*Plus session!  Use 'M-x sqlplus' to start the SQL*Plus interpreter"))
    (unless (get-buffer-process process-buffer-name)
      (sqlplus-shutdown connect-string)
      (error "Buffer '%s' is not talking to anybody!" output-buffer-name)))
  t))
#+end_src
* Keybinds via bind-key
Use bind-key for... binding keys
+[[https://github.com/emacsattic/bind-key]]

#+begin_src emacs-lisp
(use-package bind-key
  :ensure t)
#+end_src

* Mode Line Mods

** Rich Minority
Hide/Highlight/Rename minor modes
+ [[https://github.com/Malabarba/rich-minority]]

#+BEGIN_SRC emacs-lisp
(use-package rich-minority
  :ensure t)
#+END_SRC
** Smart Mode Line
Color coded themable mode line. 
+ [[https://github.com/Malabarba/smart-mode-line]]

*** Powerline theme for Smart Mode Line

#+BEGIN_SRC emacs_lisp
(use-package smart-mode-line-powerline-theme
  :ensure t)
#+END_SRC

*** Actual SML setup

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :init
  (progn
    (setq sml/theme 'respectful)
    (sml/setup)
    (setq-default
     mode-line-format
     '("%e"
       mode-line-front-space
       mode-line-mule-info
       mode-line-client
       mode-line-modified
       mode-line-remote
       mode-line-frame-identification
       mode-line-buffer-identification
       "   "
       mode-line-position
       (vc-mode vc-mode)
       "  "
       mode-line-modes
       mode-line-misc-info
       mode-line-end-spaces))))
#+END_SRC

* Themes
** Personal Theme Setup
The original plan here was to check for and install any missing themes I want and to configure my default. This seems to make Customize tetchy about being overriden.
For the sake of convenience as I'm still leraning Emacs, I'm just going to throw the customize file into git. I'm sure this will *never* /ever/ come back to bite me in the ass.
That didn't take long. Looks like Smart Mode Line is not Going to play nice with my normal theme and customize. Back to being explicit and overriding customize

*** Birds of Paradise

#+begin_src emacs-lisp
(use-package birds-of-paradise-plus-theme
  :ensure t
  :init
  (progn
    (load-theme 'birds-of-paradise-plus t)))
#+end_src

** Daniel Mai's theme switch functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

** Highlight Current Lines

#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src

* Ido and Smex
Helm looks super useful, but I've got enough on my plate just trying to get Emacs itself to stick in my mind.

** Ido
Interactively Do Things
+ [[http://emacswiki.org/emacs/InteractivelyDoThings]]
#+begin_src emacs-lisp
(use-package ido
  :ensure t
  :init
  (progn
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode t)
    (use-package ido-ubiquitous
      :ensure t
      :init (ido-ubiquitous-mode))
    (use-package ido-vertical-mode
      :ensure t
      :init (ido-vertical-mode 1)
      (setq ido-vertical-define-keys 'C-n-and-C-p-only))
    (use-package ido-completing-read+
      :ensure t)))

#+end_src

** Smex
Replacement for execute-extended-command (Meta-X), integrated with Ido.
+ [[http://www.emacswiki.org/emacs/Smex]]
#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :init
  (progn
    (smex-initialize))
    :bind (("M-x" . smex)
      ("M-X" . smex-major-mode-commands)
      ;; This is the old M-x
      ("C-c M-x" . execute-extended-command)))

#+end_src

* Nyan!

It's fucking Nyan Cat, how much more explanation do you need?
+ [[http://www.emacswiki.org/emacs/NyanMode]]
+ [[https://github.com/PuercoPop/nyan-prompt]]

Well, maybe one more piece of explanation. Nyan Prompt adds a Nyan to the eshell prompt. Eshell is one of the three built in Emacs shells:
1. Shell is the old-school shell. It runs the default shell in the background.
2. Term is an actual terminal emulator, runs whatever you want inside Emacs.
3. Eshell is an actual EmacsLisp shell.

#+begin_src emacs-lisp
(use-package nyan-mode
  :ensure t
  :init
  (progn
    (setq nyan-animate-nyancat t)
    (setq nyan-wavy-tail t)
    (nyan-mode t)))

(use-package nyan-prompt
  :ensure t
  :init
  (progn
    (add-hook 'eshell-load-hook 'nyan-prompt-enable)))
#+end_src

* Magit
We need some git integration up in here. Switching out of Emacs to commit on the command line is getting annoying.
+ [[http://www.emacswiki.org/emacs/Magit]]

#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

* Colorization
** Rainbow Blocks/Delimiters
Blocks is an evolution of delimters that colorizes things in parens by depth.
+ [[https://github.com/istib/rainbow-blocks]]

#+begin_src emacs-lisp
(use-package rainbow-blocks
  :ensure t)
#+end_src

** Rainbow Mode
Colorize names of colors in *some* modes 
+ [[https://julien.danjou.info/projects/emacs-packages]]

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC
* Extra Help Config

** Which-key

which-key is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup. 
[[https://github.com/justbur/emacs-which-key]]

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (progn
    (which-key-mode)))
#+END_SRC
* Better Buffer Selection

** IBuffer
IBuffer is a built-in replacement for the stanard buffer selection buffer

#+BEGIN_SRC emacs-lisp
(bind-key "C-x C-b" 'ibuffer)
#+END_SRC
* Writing

** NaNoWriMo
Nano word counter mode
[[https://bitbucket.org/gvol/nanowrimo.el]]

#+BEGIN_SRC emacs-lisp
(use-package nanowrimo
  :ensure t)
#+END_SRC

** Synosarus
Synosaurus is a thesaurus fontend for Emacs with pluggable backends.
[[https://github.com/rootzlevel/synosaurus]]

#+BEGIN_SRC emacs-lisp
(use-package synosaurus
  :ensure t
  :init
  (progn
    (synosaurus-mode)))

#+END_SRC

** Visual Line Mode in Org-Mode Files

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC
** Flyspell and Fix for aspell
Aspell needs a command line adjustment for flyspell

#+BEGIN_SRC emacs-lisp
(setq ispell-list-command "--list")
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+END_SRC
* Coding
Company Mode
[[https://company-mode.github.io/]]

#+begin_src emacs-lisp
(use-package company
  :ensure t)
#+end_src

Elixir!
[[http://www.alchemist-elixir.org/]]

#+begin_src emacs-lisp
(use-package alchemist
  :ensure t)
#+end_src

Python
[[https://github.com/jorgenschaefer/elpy]]

#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :init (elpy-enable))
#+end_src
