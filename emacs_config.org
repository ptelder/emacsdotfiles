#+TITLE: Emacs Configuration
#+AUTHOR: Kenneth W Brown III

This concept is blatantly ripped off from Daniel Mai. This file assumes Emacs 24 or above.

* Personal Information

I have no idea where this gets used, but the Emacs docs say they're legit... Perhaps they can be fed to default skeletons?

#+begin_src emacs-lisp
(setq user-full-name "Kenneth W Brown III"
      user-mail-address "pliny@ptelder.net")
#+end_src

* Customize settings

Set up the customize system to use its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].

#+begin_src emacs-lisp
(setq custom-file (expand-file-name "customize-persistence.el" user-emacs-directory))
(load custom-file)
#+end_src

* Keybinds via bind-key
Use bind-key for... binding keys
+[[https://github.com/emacsattic/bind-key]]

#+begin_src emacs-lsp
(use-package bind-key
  :ensure t)
#+end_src

* Diminish
Diminished modes are active, but not showy about it. 
+[[http://www.emacswiki.org/emacs/DiminishedModes]]

#+begin_src emacs-lsp
(require 'diminish)
#+end_src

* Themes
** Personal Theme Setup
*** Birds of Paradise

#+begin_src emacs-lisp
(use-package birds-of-paradise-plus-theme
  :ensure t
  :init
  (progn
    (load-theme 'birds-of-paradise-plus t)))
#+end_src

** Daniel Mai's theme switch functions

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "s-<f12>" 'switch-theme)
(bind-key "s-<f11>" 'disable-active-themes)
#+end_src

* Ido and Smex
Helm looks super useful, but I've got enough on my plate just trying to get Emacs itself to stick in my mind.

** Ido
Interactively Do Things
+ [[http://emacswiki.org/emacs/InteractivelyDoThings]]
#+begin_src emacs-lisp
(use-package ido
  :ensure t
  :init
  (progn
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode t)
    (use-package ido-ubiquitous
      :ensure t
      :init (ido-ubiquitous-mode))
    (use-package ido-vertical-mode
      :ensure t
      :init (ido-vertical-mode 1)
      (setq ido-vertical-define-keys 'C-n-and-C-p-only))
    (use-package ido-completing-read+
      :ensure t)))

#+end_src

** Smex
Replacement for execute-extended-command (Meta-X), integrated with Ido.
+ [[http://www.emacswiki.org/emacs/Smex]]
#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :init
  (progn
    (smex-initialize))
    :bind (("M-x" . smex)
      ("M-X" . smex-major-mode-commands)
      ;; This is the old M-x
      ("C-c M-x" . execute-extended-command)))

#+end_src

* Nyan!

It's fucking Nyan Cat, how much more explanation do you need?
+ [[http://www.emacswiki.org/emacs/NyanMode]]
+ [[https://github.com/PuercoPop/nyan-prompt]]

Well, maybe one more piece of explanation. Nyan Prompt adds a Nyan to the eshell prompt. Eshell is one of the three built in Emacs shells:
1. Shell is the old-school shell. It runs the default shell in the background.
2. Term is an actual terminal emulator, runs whatever you want inside Emacs.
3. Eshell is an actual EmacsLisp shell.

#+begin_src emacs-lisp
(use-package nyan-mode
  :ensure t
  :init
  (progn
    (setq nyan-animate-nyancat t)
    (setq nyan-wavy-tail t)
    (nyan-mode t)))

(use-package nyan-prompt
  :ensure t
  :init
  (progn
    (add-hook 'eshell-load-hook 'nyan-prompt-enable)))
#+end_src

* Magit
We need some git integration up in here. Switching out of Emacs to commit on the command line is getting annoying.
+ [[http://www.emacswiki.org/emacs/Magit]]

#+begin_src emacs-lisp
(use-package magit
  :ensure t)
#+end_src

* Colorization
** Rainbow Blocks/Delimiters
Blocks is an evolution of delimters that colorizes things in parens by depth.
+ [[https://github.com/istib/rainbow-blocks]]

#+begin_src emacs-lisp
(use-package rainbow-blocks
  :ensure t)
#+end_src

** Rainbow Mode
Colorize names of colors in *some* modes 
+ [[https://julien.danjou.info/projects/emacs-packages]]

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t)
#+END_SRC

* Installed Packages

  rich-minority      20150930.517  installed             Clean-up and Beautify the list of minor-modes.
  smart-mode-line    20150803.338  installed             A color coded smart mode-line.


* Customize Settings to import

 '(server-mode t)
 '(uniquify-buffer-name-style (quote post-forward) nil (uniquify)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 136 :width normal :foundry "adobe" :family "Source Code Pro")))))
